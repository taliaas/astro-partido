
---

import DashboardHome from "@/components/Dashboard/DashboardHome.vue";
import RootLayout from "../layouts/RootLayout.astro";
import {isAuthenticated} from "../lib/auth";
import OrdinaryService from "../services/OrdinaryService";
import Computo from "../services/Computo";

async function getMinute() {
    const service = new OrdinaryService()
    try {
        return service.getLatestMinute()
    } catch (e) {
        console.error(e)
    }
}

const data = [
    {
        id: 1,
        title: 'Acuerdos',
        name: 'acuerdos',
        description: 'Comportamiento de acuerdos en el Ãºltimo mes',
        porcen: 2,
        trend: 0
    },
    {
        id: 2,
        title: 'Participantes',
        name: 'participantes',
        description: 'Asistencia de participantes',
        porcen: 3,
        trend: 0
    },
    {id: 3, title: 'Invitados', name: 'invitados', description: 'Asistencia de invitados', porcen: 4, trend: 0}
]

async function getKPIs() {
    const services = new Computo()
    try {
        const kpis = await services.getCompare();
        return data.map(item => {
            const kpiValue = kpis.difference[item.name];
            if (kpiValue !== undefined) {
                return {...item, trend: kpiValue};
            }
            return item;
        });
    } catch (e) {
        console.error(e)
    }
}
async function getDocument(): Promise<number | undefined>{
    const service = new OrdinaryService()
    try{
        return await service.getMinutesByCurrentMonth()
    }
    catch (e) {
        console.error(e)
    }
}
async function getCountMinutesPending(): Promise<number | undefined>{
    const service = new OrdinaryService()
    try{
        return await service.getMinutesByStatus('Pendiente');
    }
    catch(e){
        console.error(e)
    }
}
async function getCountMinutesProcesada(){
    const service = new OrdinaryService()
    try{
        return await service.getMinutesByStatus('Procesada');
    }
    catch(e){
        console.error(e)
    }
}

const documents = await getMinute()
const kpis = await getKPIs();
const totalDoc = await getDocument();
const pending = await getCountMinutesPending();
const procesada = await getCountMinutesProcesada();

const cards = [
    {
        title: 'Documentos Pendientes',
        value: pending,
        subtext: {text: '4 nuevos hoy', color: 'text-blue-500'},
        icon: "FileText"
    },
    {
        title: 'Documentos Procesados',
        value: procesada,
        subtext: {text: '+15% este mes', color: 'text-green-500'},
        icon: "FileCheck2"
    },
    {
        title: 'Total de Documentos',
        value: totalDoc,
        subtext: {text: '+5% desde ayer', color: 'text-green-500'},
        icon: "Files"
    },
    {
        title: 'Indicadores Alertas',
        value: '24',
        subtext: {text: '+2 esta semana', color: 'text-blue-500'},
        icon: "Activity"
    },
]
---

<RootLayout>
    <DashboardHome client:load documents={documents!} kpis={kpis!} cards={cards}/>
</RootLayout>
